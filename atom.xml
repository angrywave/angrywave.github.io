<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ammonition</title>
  
  <subtitle>for tech</subtitle>
  <link href="angrywave.github.io/atom.xml" rel="self"/>
  
  <link href="https://angrywave.github.io/"/>
  <updated>2019-07-21T10:23:15.805Z</updated>
  <id>https://angrywave.github.io/</id>
  
  <author>
    <name>angrywave</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>music</title>
    <link href="https://angrywave.github.io/music/"/>
    <id>https://angrywave.github.io/music/</id>
    <published>2019-07-21T10:12:58.000Z</published>
    <updated>2019-07-21T10:23:15.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-QTlNFIGn" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-QTlNFIGn"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "晴天",              author: "Jay",              url: "qingtian.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Entertainment" scheme="https://angrywave.github.io/categories/Entertainment/"/>
    
    
      <category term="music" scheme="https://angrywave.github.io/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>demo</title>
    <link href="https://angrywave.github.io/demo/"/>
    <id>https://angrywave.github.io/demo/</id>
    <published>2019-07-21T05:26:05.000Z</published>
    <updated>2019-07-22T03:28:36.489Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="//demo//demo.jpg" title="This is an example image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="demo" scheme="https://angrywave.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>golang-learning</title>
    <link href="https://angrywave.github.io/Golang/"/>
    <id>https://angrywave.github.io/Golang/</id>
    <published>2019-07-20T05:26:05.000Z</published>
    <updated>2019-07-22T03:31:30.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go-basics"><a href="#Go-basics" class="headerlink" title="Go basics"></a>Go basics</h1><h2 id="packages-manage"><a href="#packages-manage" class="headerlink" title="packages manage"></a>packages manage</h2><p>在 gopath文件夹下  go get github.com/vmihailenco/redis</p><p>回车之后会自动下载项目到GOPATH中的src目录下。</p><img src="//Golang//golang.jpg" title="This is an example image"><h2 id="缓存sync-Map"><a href="#缓存sync-Map" class="headerlink" title="缓存sync.Map"></a>缓存sync.Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">sync.Map 源码解析 </span><br><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 该锁用来保护dirty</span></span><br><span class="line">    mu Mutex</span><br><span class="line">    <span class="comment">// 存读的数据，因为是atomic.value类型，只读类型，所以它的读是并发安全的</span></span><br><span class="line">    read atomic.Value <span class="comment">// readOnly</span></span><br><span class="line">    <span class="comment">//包含最新的写入的数据，并且在写的时候，会把read 中未被删除的数据拷贝到该dirty中，因为是普通的map存在并发安全问题，需要用到上面的mu字段。</span></span><br><span class="line">    dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">    <span class="comment">// 从read读数据的时候，会将该字段+1，当等于len（dirty）的时候，会将dirty拷贝到read中（从而提升读的性能）。</span></span><br><span class="line">    misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">--------------------- </span><br><span class="line">https:<span class="comment">//blog.csdn.net/u010230794/article/details/82143179 </span></span><br><span class="line">https:<span class="comment">//www.jianshu.com/p/671eb4245c28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m sync.Map</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Store</span></span><br><span class="line">m.Store(<span class="number">1</span>,<span class="string">"a"</span>)</span><br><span class="line">m.Store(<span class="number">2</span>,<span class="string">"b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//LoadOrStore</span></span><br><span class="line"><span class="comment">//若key不存在，则存入key和value，返回false和输入的value</span></span><br><span class="line">v,ok := m.LoadOrStore(<span class="string">"1"</span>,<span class="string">"aaa"</span>)</span><br><span class="line">fmt.Println(ok,v) <span class="comment">//false aaa</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//若key已存在，则返回true和key对应的value，不会修改原来的value</span></span><br><span class="line">v,ok = m.LoadOrStore(<span class="number">1</span>,<span class="string">"aaa"</span>)</span><br><span class="line">fmt.Println(ok,v) <span class="comment">//false aaa</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Load</span></span><br><span class="line">v,ok = m.Load(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">fmt.Println(<span class="string">"it's an existing key,value is "</span>,v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"it's an unknown key"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Range</span></span><br><span class="line"><span class="comment">//遍历sync.Map, 要求输入一个func作为参数</span></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(k, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//这个函数的入参、出参的类型都已经固定，不能修改</span></span><br><span class="line"><span class="comment">//可以在函数体内编写自己的代码，调用map中的k,v</span></span><br><span class="line"> </span><br><span class="line">fmt.Println(k,v)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">m.Range(f)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Delete</span></span><br><span class="line">m.Delete(<span class="number">1</span>)</span><br><span class="line">fmt.Println(m.Load(<span class="number">1</span>))</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过interface实现多态"><a href="#通过interface实现多态" class="headerlink" title="通过interface实现多态"></a>通过interface实现多态</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.bilibili.com/video/av36036183/?p=105    美女老师带你学go语言</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span>&#123;</span><br><span class="line">  peri() <span class="keyword">float64</span></span><br><span class="line">  area() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类 Circle 实现了 Shape 的方法， 因此 是 接口Shape 的实现类 </span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span>&#123;</span><br><span class="line">  radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span><span class="title">peri</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.redius*<span class="number">2</span>*math.Pi</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> math.Pow(c.redius, <span class="number">2</span>)*math.Pi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下转型</span></span><br><span class="line"><span class="keyword">var</span> s1 Shape = Circle&#123;redius:<span class="number">2</span>&#125; <span class="comment">// 声明为接口类型 并 创建实现类对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var v1 interface = 实现类对象  只能访问方法</span></span><br><span class="line"><span class="comment">// var v2  实现类 = 实现类对象   可以访问方法和属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> 用法</span><br><span class="line"><span class="number">1</span> 函数如果接受接口类型作为参数 ， 那么可以传入 该接口的任意实现类作为参数</span><br><span class="line"><span class="number">2</span> 定义一个类型为接口 ， 那可以 被赋值为 该接口的任意 实现类 对象</span><br><span class="line">定义一个接口类型的容器 ， 它可以存储 任意的实现类对象</span><br><span class="line">arr := [<span class="number">4</span>]Shape&#123;t1,s1,c1,t2&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上转型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getType</span><span class="params">(s Shape)</span></span>&#123;</span><br><span class="line">  <span class="comment">// instance , ok :=  接口对象.（实现类）</span></span><br><span class="line">  <span class="keyword">if</span> ins, ok := s.(Circle); ok&#123;</span><br><span class="line">  fmt.printf(ins)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getType</span><span class="params">(s Shape)</span></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> ins := s.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> Circle:</span><br><span class="line">    pass</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">将数据编码成json字符串   json.Marshal()</span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Age   <span class="keyword">int</span></span><br><span class="line">    HIgh  <span class="keyword">bool</span></span><br><span class="line">    sex   <span class="keyword">string</span></span><br><span class="line">    Class *Class <span class="string">`json:"class"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span>&#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Grade <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cla := <span class="built_in">new</span>(Class)  <span class="comment">//指针变量</span></span><br><span class="line">cla.Name = <span class="string">"1班"</span></span><br><span class="line">cla.Grade = <span class="number">3</span></span><br><span class="line">stu.Class=cla</span><br><span class="line"></span><br><span class="line"> <span class="comment">//实例化一个数据结构，用于生成json字符串</span></span><br><span class="line">    stu := Stu&#123;</span><br><span class="line">        Name: <span class="string">"张三"</span>,</span><br><span class="line">        Age:  <span class="number">18</span>,</span><br><span class="line">        HIgh: <span class="literal">true</span>,</span><br><span class="line">        sex:  <span class="string">"男"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">jsonStu, err := json.Marshal(stu)</span><br><span class="line"><span class="comment">//jsonStu是[]byte类型，转化成string类型便于查看  string(jsonStu)</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"生成json字符串错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">只要是可导出成员（变量首字母大写），都可以转成json。因成员变量sex是不可导出的，故无法转成json。</span><br><span class="line">如果变量打上了json标签，如Name旁边的 <span class="string">`json:"name"`</span> ，那么转化成的json key就用该标签“name”，否则取变量名作为key，如“Age”，“HIgh”。</span><br><span class="line"><span class="keyword">bool</span>类型也是可以直接转换为json的value值。</span><br><span class="line">Channel， <span class="built_in">complex</span> 以及函数不能被编码json字符串。当然，循环的数据结构也不行，它会导致marshal陷入死循环。</span><br><span class="line"></span><br><span class="line">指针变量，编码时自动转换为它所指向的值，如cla变量。 </span><br><span class="line">（当然，不传指针，Stu <span class="keyword">struct</span>的成员Class如果换成Class <span class="keyword">struct</span>类型，效果也是一模一样的。只不过指针更快，且能节省内存空间。）</span><br><span class="line">最后，强调一句：json编码成字符串后就是纯粹的字符串了。</span><br><span class="line"></span><br><span class="line">原文：https:<span class="comment">//blog.csdn.net/zxy_666/article/details/80173288</span></span><br></pre></td></tr></table></figure><p>###反序列化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 func Unmarshal(data []byte, v interface&#123;&#125;) error</span></span><br><span class="line"><span class="comment">// Use json.Unmarshal if you already have the JSON data in memory.</span></span><br><span class="line">data, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; data != <span class="literal">nil</span> &#123;</span><br><span class="line">    err = json.Unmarshal(data, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Use json.Decoder if your data is coming from an io.Reader stream, or you need to decode multiple values from a stream of data.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//For the case of reading from an HTTP request, I’d pick json.Decoder since you’re obviously reading from a stream.</span></span><br><span class="line"></span><br><span class="line">原文：https:<span class="comment">//blog.csdn.net/jason_cuijiahui/article/details/84566387 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2  func NewDecoder(r io.Reader) *Decoder</span></span><br><span class="line"><span class="comment">// func (dec *Decoder) Decode(v interface&#123;&#125;) error</span></span><br><span class="line">err = json.NewDecoder(resp.Body).Decode(value)</span><br></pre></td></tr></table></figure><h1 id="Beego"><a href="#Beego" class="headerlink" title="Beego"></a>Beego</h1><p><a href="https://www.jianshu.com/p/b729ff1f6f9e" target="_blank" rel="noopener">https://www.jianshu.com/p/b729ff1f6f9e</a></p><p>bee new project</p><p>bee api apiproject</p><h1 id="gorm"><a href="#gorm" class="headerlink" title="gorm"></a>gorm</h1><hr><p><a href="http://gorm.book.jasperxu.com/models.html#md" target="_blank" rel="noopener">http://gorm.book.jasperxu.com/models.html#md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://www.jianshu.com/p/a40a79f1915f</span><br><span class="line">https://www.jianshu.com/p/f7419395e4cc</span><br><span class="line"></span><br><span class="line">if err := db.Set(&quot;gorm:table_options&quot;, &quot;ENGINE=InnoDB DEFAULT CHARSET=utf8&quot;).CreateTable(&amp;User&#123;&#125;,&amp;Video_info&#123;&#125;).Error; err != nil &#123;</span><br><span class="line">   panic(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##CRUD</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"database/sql"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line"> </span><br><span class="line">    _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:wangshubo@/test?charset=utf8"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    stmt, err := db.Prepare(<span class="string">"INSERT user_info SET id=?,name=?"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    res, err := stmt.Exec(<span class="number">1</span>, <span class="string">"wangshubo"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    stmt, err = db.Prepare(<span class="string">"update user_info set name=? where id=?"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    res, err = stmt.Exec(<span class="string">"wangshubo_update"</span>, <span class="number">1</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    affect, err := res.RowsAffected()</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    fmt.Println(affect)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// query1 </span></span><br><span class="line">    rows, err := db.Query(<span class="string">"SELECT * FROM user_info"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> uid <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">var</span> username <span class="keyword">string</span></span><br><span class="line"> </span><br><span class="line">        err = rows.Scan(&amp;uid, &amp;username)</span><br><span class="line">        checkErr(err)</span><br><span class="line">        fmt.Println(uid)</span><br><span class="line">        fmt.Println(username)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//query2 </span></span><br><span class="line">    <span class="keyword">var</span> username, departname, created <span class="keyword">string</span></span><br><span class="line">err := db.QueryRow(<span class="string">"SELECT username,departname,created FROM userinfo WHERE uid=?"</span>, <span class="number">3</span>).Scan(&amp;username, &amp;departname, &amp;created)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//query3   查询一个</span></span><br><span class="line"> stmtOut, err := dbConn.Prepare(<span class="string">"select author_id, name, display_ctime from video_infos where id = ?"</span>)</span><br><span class="line"> <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aid <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> dct, name <span class="keyword">string</span></span><br><span class="line">err = stmtOut.QueryRow(vid).Scan(&amp;aid, &amp;name, &amp;dct)</span><br><span class="line"> <span class="keyword">defer</span> stmtOut.Close()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//query 4 查询多个 </span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    stmt, err = db.Prepare(<span class="string">"delete from user_info where id=?"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    res, err = stmt.Exec(<span class="number">1</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// query</span></span><br><span class="line">    rows, err = db.Query(<span class="string">"SELECT * FROM user_info"</span>)</span><br><span class="line">    checkErr(err)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> uid <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">var</span> username <span class="keyword">string</span></span><br><span class="line"> </span><br><span class="line">        err = rows.Scan(&amp;uid, &amp;username)</span><br><span class="line">        checkErr(err)</span><br><span class="line">        fmt.Println(uid)</span><br><span class="line">        fmt.Println(username)</span><br><span class="line">    &#125;</span><br><span class="line">    db.Close()</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkErr</span><span class="params">(err error)</span></span> &#123;    </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx-rtmp-ffmpeg"><a href="#Nginx-rtmp-ffmpeg" class="headerlink" title="Nginx-rtmp+ffmpeg"></a>Nginx-rtmp+ffmpeg</h1><p>最近尝试着搭建了搭建一个<a href="https://link.jianshu.com/?t=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FReal-Time_Messaging_Protocol" target="_blank" rel="noopener">基于RTMP协议</a> 的流媒体服务器，我采用了Nginx流媒体服务器，并使用 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFFmpeg" target="_blank" rel="noopener">ffmpeg</a> 进行推流，成功推流本地视频到流媒体服务器上，可以正常播放。</p><p><a href="https://www.jianshu.com/p/06c2025edcd3" target="_blank" rel="noopener">https://www.jianshu.com/p/06c2025edcd3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Golang" scheme="https://angrywave.github.io/categories/Golang/"/>
    
    
      <category term="beego" scheme="https://angrywave.github.io/tags/beego/"/>
    
  </entry>
  
</feed>
